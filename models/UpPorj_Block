class UpProj_Block(nn.Module):
    def __init__(self, in_channels, out_channels, oheight=0, oweight=0):
        super(UpProj_Block, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels,
                               kernel_size=5,
                               stride=1,
                               padding=2,
                               bias=False)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.conv2 = nn.Conv2d(out_channels, out_channels,
                               kernel_size=3,
                               stride=1,
                               padding=1,
                               bias=False)
        self.bn2 = nn.BatchNorm2d(out_channels)
        self.sc_conv1 = nn.Conv2d(out_channels, out_channels,
                                  kernel_size=5,
                                  stride=1,
                                  padding=2,
                                  bias=False)
        self.sc_bn1 = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)
        self.oheight = oheight
        self.oweiht = oweight
        self._up_pool = Unpool(in_channels)

    def _up_pooling(self, x, scale):
        # oheight = 0
        # oweight = 0
        if self.oheight == 0 and self.oweiht == 0:
            # oheight = scale * x.size(2)
            # oweight = scale * x.size(3)
            x = self._up_pool(x)
        else:
            # oweight = self.oweiht
            # oheight = self.oheight
            x = self._up_pool(x)
        return x

    def forward(self, x):
        # unsampling
        x = self._up_pooling(x, 2)
        # lack of conv?

        out = self.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))

        short_cut = self.sc_bn1(self.sc_conv1(x))
        out += short_cut

        out = self.relu(out)

        return out
